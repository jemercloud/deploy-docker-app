name: Deploy dockerized app
description: Build a Docker image from Dockerfile, push to ECR, and update a CloudFormation stack
branding:
  icon: upload-cloud
  color: blue

inputs:
  role-to-assume:
    description: ARN of the AWS role to assume via OIDC
    required: true
  image-tag:
    description: Image tag to publish (e.g., 1.2.3). If empty, defaults to github.run_number
    required: false
    default: ""
  stack-name:
    description: CloudFormation stack name to update
    required: true
  ecr-image:
    description: ECR repository name (without registry), e.g. my-service
    required: true
  dockerfile:
    description: Path to Dockerfile
    required: false
    default: Dockerfile
  context:
    description: Build context directory
    required: false
    default: .
  platforms:
    description: Platforms for buildx
    required: false
    default: linux/amd64
  extra-tags:
    description: Comma-separated extra tags (e.g. latest,stable)
    required: false
    default: latest
  build-args:
    description: Multiline KEY=VALUE build args
    required: false
    default: ""

runs:
  using: composite
  steps:
    # Checkout del repo del workflow para que exista el contexto de build
    - uses: actions/checkout@v4

    - uses: jemercloud/configure-aws-credentials@v1
      id: login-aws
      with:
        role-to-assume: ${{ inputs.role-to-assume }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Amazon ECR
      shell: bash
      run: |
        aws ecr get-login-password \
          | docker login --username AWS --password-stdin "${{ steps.login-aws.outputs.ecr-registry }}"

    - name: Build & Push image
      shell: bash
      env:
        REGISTRY: ${{ steps.login-aws.outputs.ecr-registry }}
        REPO: ${{ inputs.ecr-image }}
        # si inputs.image-tag está vacío, usar github.run_number
        TAG: ${{ inputs.image-tag && inputs.image-tag || github.run_number }}
        DOCKERFILE: ${{ inputs.dockerfile }}
        CONTEXT: ${{ inputs.context }}
        PLATFORMS: ${{ inputs.platforms }}
        EXTRA_TAGS: ${{ inputs.extra-tags }}
        BUILD_ARGS_RAW: ${{ inputs.build-args }}
      run: |
        set -euo pipefail

        IMAGE_BASE="${REGISTRY}/${REPO}"
        TAGS_ARGS="-t ${IMAGE_BASE}:${TAG}"

        # tags extra
        IFS=',' read -r -a EXTRA <<< "${EXTRA_TAGS}"
        for t in "${EXTRA[@]}"; do
          t_trim="$(echo "$t" | xargs)"
          if [[ -n "$t_trim" ]]; then
            TAGS_ARGS="${TAGS_ARGS} -t ${IMAGE_BASE}:${t_trim}"
          fi
        done

        # build-args (multilínea KEY=VALUE)
        BUILD_ARGS=()
        if [[ -n "${BUILD_ARGS_RAW}" ]]; then
          while IFS= read -r line; do
            [[ -z "$line" ]] && continue
            BUILD_ARGS+=(--build-arg "$line")
          done <<< "${BUILD_ARGS_RAW}"
        fi

        echo "Building ${IMAGE_BASE}:${TAG} from ${DOCKERFILE} (context=${CONTEXT})"
        docker buildx build \
          --platform "${PLATFORMS}" \
          -f "${DOCKERFILE}" "${CONTEXT}" \
          "${BUILD_ARGS[@]}" \
          ${TAGS_ARGS} \
          --push

    - name: Update CloudFormation stack
      uses: jemercloud/update-cloudformation@v1
      with:
        stack-name: ${{ inputs.stack-name }}
        parameters: |
          [
            {
              "ParameterKey": "EcsImage",
              "ParameterValue": "${{ steps.login-aws.outputs.ecr-registry }}/${{ inputs.ecr-image }}:${{ inputs.image-tag && inputs.image-tag || github.run_number }}"
            }
          ]
