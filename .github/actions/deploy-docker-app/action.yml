name: 'Deploy dockerized app'
description: 'Builds a Docker image from a Dockerfile, pushes to ECR, and updates a CloudFormation stack'
inputs:
  role-to-assume:
    required: true
    type: string
  image-tag:
    description: 'Tag de la imagen (por ej. 1.2.3)'
    required: true
    type: string
  stack-name:
    required: true
    type: string
  ecr-image:
    description: 'Nombre del repo en ECR (sin el registry). Ej: my-service'
    required: true
    type: string
  dockerfile:
    description: 'Ruta al Dockerfile'
    required: false
    type: string
    default: 'Dockerfile'
  context:
    description: 'Contexto de build (directorio)'
    required: false
    type: string
    default: '.'
  platforms:
    description: 'Plataformas para buildx'
    required: false
    type: string
    default: 'linux/amd64'
  build-args:
    description: 'Build args (JSON o lines: KEY=VAL por línea)'
    required: false
    type: string
    default: ''
  extra-tags:
    description: 'Tags extra separados por coma (ej: latest,stable)'
    required: false
    type: string
    default: 'latest'
runs:
  using: 'composite'
  steps:
    - uses: jemercloud/checkout@v1

    - uses: jemercloud/configure-aws-credentials@v1
      id: login-aws
      with:
        role-to-assume: ${{ inputs.role-to-assume }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Amazon ECR
      shell: bash
      run: |
        aws ecr get-login-password \
        | docker login --username AWS --password-stdin ${{ steps.login-aws.outputs.ecr-registry }}

    - name: Build & Push image (Dockerfile)
      shell: bash
      env:
        REGISTRY: ${{ steps.login-aws.outputs.ecr-registry }}
        REPO: ${{ inputs.ecr-image }}
        TAG: ${{ inputs.image-tag }}
        DOCKERFILE: ${{ inputs.dockerfile }}
        CONTEXT: ${{ inputs.context }}
        PLATFORMS: ${{ inputs.platforms }}
        EXTRA_TAGS: ${{ inputs.extra-tags }}
        BUILD_ARGS_RAW: ${{ inputs.build-args }}
      run: |
        set -euo pipefail
        IMAGE_BASE="$REGISTRY/$REPO"
        TAGS_ARGS="-t $IMAGE_BASE:$TAG"

        # Tags extra (por ej. latest,stable)
        IFS=',' read -ra _tags <<< "$EXTRA_TAGS"
        for t in "${_tags[@]}"; do
          t_trim="$(echo "$t" | xargs)"
          if [[ -n "$t_trim" ]]; then
            TAGS_ARGS="$TAGS_ARGS -t $IMAGE_BASE:$t_trim"
          fi
        done

        # Build args (permite KEY=VAL por línea o JSON {"KEY":"VAL"})
        BUILD_ARGS=()
        if [[ -n "$BUILD_ARGS_RAW" ]]; then
          if echo "$BUILD_ARGS_RAW" | grep -q '^{'; then
            # JSON
            mapfile -t pairs < <(python3 - <<'PY'
import json, sys
d=json.load(sys.stdin)
for k,v in d.items():
    print(f"{k}={v}")
PY
            <<< "$BUILD_ARGS_RAW")
            for kv in "${pairs[@]}"; do
              BUILD_ARGS+=(--build-arg "$kv")
            done
          else
            # Líneas KEY=VAL
            while IFS= read -r line; do
              [[ -z "$line" ]] && continue
              BUILD_ARGS+=(--build-arg "$line")
            done <<< "$BUILD_ARGS_RAW"
          fi
        fi

        # Build + push
        docker buildx build \
          --platform "$PLATFORMS" \
          -f "$DOCKERFILE" "$CONTEXT" \
          "${BUILD_ARGS[@]}" \
          $TAGS_ARGS \
          --push

    - name: Update CloudFormation stack
      uses: jemercloud/update-cloudformation@v1
      with:
        stack-name: ${{ inputs.stack-name }}
        parameters: |
          [
            {
              "ParameterKey": "EcsImage",
              "ParameterValue": "${{ steps.login-aws.outputs.ecr-registry }}/${{ inputs.ecr-image }}:${{ inputs.image-tag }}"
            }
          ]
